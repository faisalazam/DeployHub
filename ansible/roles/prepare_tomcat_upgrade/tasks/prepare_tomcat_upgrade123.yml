---
- name: Gather OS Facts
  ansible.builtin.setup:
  become: true

- name: Find matching APM agent JAR files
  ansible.windows.win_find:
    paths: "{{ prepare_tomcat_upgrade_tomcat_installation_drive }}\\tomcat\\srva\\lib\\elastic"
    patterns: elastic-apm-agent-*.jar
  register: found_files

- name: Fail if there is more than one matching file
  ansible.builtin.fail:
    msg: >-
      Multiple elastic-apm-agent-*.jar files found:
      {{ found_files.files | map(attribute='path') | list }}.
      Please delete the ones that are not required and keep only one.
  when: found_files.matched | int > 1

- name: Delete destination directory if exists
  ansible.windows.win_file:
    path: "{{ prepare_tomcat_upgrade_utility_destination_path }}"
    state: absent

- name: Copy scripts
  ansible.windows.win_copy:
    src: "{{ prepare_tomcat_upgrade_utility_scripts_path }}/"
    dest: "{{ prepare_tomcat_upgrade_utility_destination_path }}\\"

- name: Copy Tomcat ZIP
  ansible.windows.win_copy:
    src: "{{ prepare_tomcat_upgrade_utility_downloads_path }}/{{ prepare_tomcat_upgrade_zip_filename }}"
    dest: "{{ prepare_tomcat_upgrade_utility_destination_path }}\\"

- name: Extract Tomcat version from filename
  ansible.builtin.set_fact:
    extracted_version: "{{ prepare_tomcat_upgrade_zip_filename | regex_search('(\\d+(\\.\\d+)+)') | replace('.', '_') }}"

- name: Determine Tomcat architecture
  ansible.builtin.set_fact:
    tomcat_architecture: >-
      {%- if 'x86' in prepare_tomcat_upgrade_zip_filename -%}32
      {%- elif 'x64' in prepare_tomcat_upgrade_zip_filename -%}64
      {%- else -%}UNKNOWN{%- endif -%}

- name: Construct the version-specific Upgraded Service Name
  ansible.builtin.set_fact:
    upgraded_service_name: "TOMCAT_{{ extracted_version }}_{{ tomcat_architecture }}_SRVA"

- name: Ensure logs directory exists
  ansible.windows.win_file:
    path: "{{ prepare_tomcat_upgrade_utility_destination_path }}\\logs"
    state: directory

- name: Define log file path
  ansible.builtin.set_fact:
    prepare_tomcat_upgrade_utility_log_path: "{{ prepare_tomcat_upgrade_utility_destination_path }}\\logs\\{{ ansible_hostname }}.log"

- name: Run the PowerShell script and log output
  ansible.windows.win_shell: |
    powershell.exe -ExecutionPolicy Bypass -File "prepare_tomcat_upgrade.ps1" `
      -upgradedServiceName "{{ upgraded_service_name }}" `
      -tomcatZipPath "{{ prepare_tomcat_upgrade_zip_filename }}" `
      -tomcatInstallationDrive "{{ prepare_tomcat_upgrade_tomcat_installation_drive }}" `
      *> "{{ prepare_tomcat_upgrade_utility_log_path }}" 2>&1
  args:
    chdir: "{{ prepare_tomcat_upgrade_utility_destination_path }}"

- name: Scan log file for WARN or ERROR messages
  ansible.windows.win_shell: |
    Select-String -Path "{{ prepare_tomcat_upgrade_utility_log_path }}" -Pattern "WARN|ERROR"
  register: log_check
  changed_when: false

- name: Display warning if the log contains WARN messages
  ansible.builtin.debug:
    msg: "⚠️ WARNING detected in logs: {{ prepare_tomcat_upgrade_utility_log_path }}. Please review."
  when: '"WARN" in log_check.stdout'

- name: Fail the playbook if ERROR is found in the log
  ansible.builtin.fail:
    msg: "❌ ERROR found in logs: {{ prepare_tomcat_upgrade_utility_log_path }}. Playbook execution stopped!"
  when: '"ERROR" in log_check.stdout'
