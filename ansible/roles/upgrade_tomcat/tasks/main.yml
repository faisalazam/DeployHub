---
- name: Gather OS Facts
  ansible.builtin.setup:
  become: true

- name: Delete destination directory if exists
  ansible.windows.win_file:
    path: "{{ upgrade_tomcat_utility_destination_path }}"
    state: absent

- name: Copy scripts
  ansible.windows.win_copy:
    src: "{{ upgrade_tomcat_utility_scripts_path }}/"
    dest: "{{ upgrade_tomcat_utility_destination_path }}\\"

- name: Copy Tomcat ZIP
  ansible.windows.win_copy:
    src: "{{ upgrade_tomcat_utility_downloads_path }}/{{ upgrade_tomcat_zip_filename }}"
    dest: "{{ upgrade_tomcat_utility_destination_path }}\\"

#- name: Extract Tomcat ZIP file
#  community.windows.win_unzip:
#    src: "{{ upgrade_tomcat_utility_destination_path }}\\{{ upgrade_tomcat_zip_filename }}"
#    dest: "{{ upgrade_tomcat_utility_destination_path }}\\tomcat"
#    remote_src: yes

- name: Extract Tomcat version from filename
  set_fact:
    extracted_version: "{{ upgrade_tomcat_zip_filename | regex_search('(\\d+(\\.\\d+)+)') | replace('.', '_') }}"

- name: Determine Tomcat architecture
  set_fact:
    tomcat_architecture: >-
      {%- if 'x86' in upgrade_tomcat_zip_filename -%}
      32
      {%- elif 'x64' in upgrade_tomcat_zip_filename -%}
      64
      {%- else -%}
      UNKNOWN
      {%- endif -%}

- name: Construct the version-specific Upgraded Service Name
  set_fact:
    upgraded_service_name: "TOMCAT_{{ extracted_version }}_{{ tomcat_architecture }}_SRVA"

- name: Ensure logs directory exists
  ansible.windows.win_file:
    path: "{{ upgrade_tomcat_utility_destination_path }}\\logs"
    state: directory

- name: Define log file path
  set_fact:
    upgrade_tomcat_utility_log_path: "{{ upgrade_tomcat_utility_destination_path }}\\logs\\{{ ansible_hostname }}.log"

- name: Run the PowerShell script and log output
  ansible.windows.win_shell: |
    powershell.exe -ExecutionPolicy Bypass -File "prepare_tomcat_upgrade.ps1" `
      -upgradedServiceName "{{ upgraded_service_name }}" `
      -tomcatZipPath "{{ upgrade_tomcat_zip_filename }}" `
      -tomcatInstallationDrive "{{ upgrade_tomcat_tomcatInstallationDrive }}" `
      *> "{{ upgrade_tomcat_utility_log_path }}" 2>&1
  args:
    chdir: "{{ upgrade_tomcat_utility_destination_path }}"

- name: Scan log file for WARN or ERROR messages
  ansible.windows.win_shell: |
    Select-String -Path "{{ upgrade_tomcat_utility_log_path }}" -Pattern "WARN|ERROR"
  register: log_check
  changed_when: false

- name: Display warning if the log contains WARN messages
  debug:
    msg: "⚠️ WARNING detected in logs: {{ upgrade_tomcat_utility_log_path }}. Please review."
  when: '"WARN" in log_check.stdout'

- name: Fail the playbook if ERROR is found in the log
  fail:
    msg: "❌ ERROR found in logs: {{ upgrade_tomcat_utility_log_path }}. Playbook execution stopped!"
  when: '"ERROR" in log_check.stdout'
