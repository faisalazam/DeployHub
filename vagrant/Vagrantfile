# Constants for configuration

VM_CPUS = 2
VM_GUI = false
VM_MEMORY = "4096"
VM_IP = "192.168.100.189"
VM_NAME = "WINDOWS_SERVER"
VM_HOSTNAME = "windows-2019-vagrant"

BOOT_TIMEOUT = 600
VAGRANT_PROVIDER = "virtualbox"
VAGRANT_BOX_VERSION = "2021.05.15"
VAGRANT_BOX_NAME = "StefanScherer/windows_2019"

WINRM_HTTP_PORT = 55985
WINRM_HTTPS_PORT = 55986
VM_COMMUNICATOR = "winrm"
WINRM_USERNAME = "vagrant"
WINRM_PASSWORD = "vagrant"

Vagrant.configure("2") do |config|
    config.vm.box = VAGRANT_BOX_NAME
    config.vm.box_version = VAGRANT_BOX_VERSION

    # Set up VM hostname
    config.vm.hostname = VM_HOSTNAME

    # Increase WinRM timeout to allow VM more time to boot
    config.vm.boot_timeout = BOOT_TIMEOUT

    # Set up the VM to use a private network
    config.vm.network "private_network", type: "static", ip: VM_IP

    config.vm.provider VAGRANT_PROVIDER do |vb|
        vb.gui = VM_GUI
        vb.cpus = VM_CPUS
        vb.name = VM_NAME
        vb.memory = VM_MEMORY
    end

    # Set the guest OS type
    config.vm.guest = :windows

    # Set WinRM transport, username, password, and port
    config.winrm.transport = :negotiate
    config.winrm.port = WINRM_HTTP_PORT
    config.winrm.username = WINRM_USERNAME
    config.winrm.password = WINRM_PASSWORD

    # Set the communicator for VM
    config.vm.communicator = VM_COMMUNICATOR

    # Provision WinRM configuration
    config.vm.provision "shell", inline: <<-SHELL
        Write-Host "Enabling PowerShell Remoting..."
        powershell -Command "Enable-PSRemoting -Force"

        Write-Host "Setting WinRM service startup type to Automatic..."
        powershell -Command "Set-Service -Name WinRM -StartupType Automatic"

        Write-Host "Starting WinRM service..."
        powershell -Command "Start-Service -Name WinRM"

        Write-Host "Configuring TrustedHosts..."
        powershell -Command "Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -Force"

        # Check if WinRM HTTP rule already exists, create if it doesn't
        Write-Host "Checking if firewall rule for WinRM HTTP exists..."
        $httpRule = powershell -Command "Get-NetFirewallRule -Name 'Allow WinRM HTTP' -ErrorAction SilentlyContinue"
        if (-not $httpRule) {
            Write-Host "Creating firewall rule for WinRM HTTP on port 5985..."
            powershell -Command "New-NetFirewallRule -Name 'Allow WinRM HTTP' -Protocol TCP -LocalPort 5985 -Action Allow -DisplayName 'Allow WinRM HTTP'"
        } else {
            Write-Host "Firewall rule for WinRM HTTP already exists."
        }

        # Check if WinRM HTTPS rule already exists, create if it doesn't
        Write-Host "Checking if firewall rule for WinRM HTTPS exists..."
        $httpsRule = powershell -Command "Get-NetFirewallRule -Name 'Allow WinRM HTTPS' -ErrorAction SilentlyContinue"
        if (-not $httpsRule) {
            Write-Host "Creating firewall rule for WinRM HTTPS on port 5986..."
            powershell -Command "New-NetFirewallRule -Name 'Allow WinRM HTTPS' -Protocol TCP -LocalPort 5986 -Action Allow -DisplayName 'Allow WinRM HTTPS'"
        } else {
            Write-Host "Firewall rule for WinRM HTTPS already exists."
        }

        Write-Host "Provisioning complete."
    SHELL

    # Additional provisioning steps (if needed) can be added here
end
