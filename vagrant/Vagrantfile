# Constants for configuration

VM_CPUS = 2
VM_GUI = false
VM_MEMORY = "4096"
VM_IP = "192.168.56.189" # The default subnet for Vagrant's private network is 192.168.56.0/24
VM_NAME = "WINDOWS_SERVER"
VM_HOSTNAME = "windows-2019-vagrant"

BOOT_TIMEOUT = 1200
VAGRANT_PROVIDER = "virtualbox"
VAGRANT_BOX_VERSION = "2021.05.15"
VAGRANT_BOX_NAME = "StefanScherer/windows_2019"

# TODO: enable https communication only
WINRM_TIMEOUT = 1200
WINRM_MAX_TRIES = 300
WINRM_RETRY_DELAY = 5
WINRM_HTTP_PORT = 55985
WINRM_HTTPS_PORT = 55986
VM_COMMUNICATOR = "winrm"
WINRM_USERNAME = "vagrant"
WINRM_PASSWORD = "vagrant"

HTTPS_ENABLED = false
CERT_EXPORT_FILE_NAME = "winrm-cert.pfx"
SRC_CERT_FILE_PATH = "./certs/" + CERT_EXPORT_FILE_NAME
DEST_CERT_FILE_PATH = "C:/certs/" + CERT_EXPORT_FILE_NAME

Vagrant.configure("2") do |config|
    config.trigger.before :up do |trigger|
        trigger.name = "Log Start"
        trigger.run = { inline: <<-SCRIPT
                Write-Host "[INFO] Vagrant is starting at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            SCRIPT
        }
    end

    config.vm.box = VAGRANT_BOX_NAME
    config.vm.box_version = VAGRANT_BOX_VERSION

    # Set up VM hostname
    config.vm.define VM_NAME
    config.vm.hostname = VM_HOSTNAME

    # Increase WinRM timeout to allow VM more time to boot
    config.vm.boot_timeout = BOOT_TIMEOUT

    # Set up the VM to use a private network
    config.vm.network "private_network", type: "static", ip: VM_IP

    config.vm.provider VAGRANT_PROVIDER do |vb|
        vb.gui = VM_GUI
        vb.cpus = VM_CPUS
        vb.name = VM_NAME
        vb.memory = VM_MEMORY
    end

    # Set the guest OS type
    config.vm.guest = :windows

    if HTTPS_ENABLED
        config.winrm.transport = :ssl
        config.winrm.port = WINRM_HTTPS_PORT
        config.winrm.ssl_peer_verification = false
    else
        config.winrm.transport = :plaintext
        config.winrm.client.basic_auth_only = true
        config.winrm.port = WINRM_HTTP_PORT
    end

    # Set WinRM transport, username, password, and port
    config.winrm.timeout = WINRM_TIMEOUT
    config.winrm.username = WINRM_USERNAME
    config.winrm.password = WINRM_PASSWORD
    config.winrm.max_tries = WINRM_MAX_TRIES # default is 20
    config.winrm.retry_delay = WINRM_RETRY_DELAY

    # Set the communicator for VM
    config.vm.communicator = VM_COMMUNICATOR

    # Verify IP configuration
    config.vm.provision :shell, :path => 'scripts/check_ip.ps1', :args => [VM_IP]

    # Configuring Service Account for Ansible
    config.vm.provision "shell", path: "scripts/setup_ansible_user.ps1"

    if HTTPS_ENABLED
        # Run the PowerShell script on the host to generate and import ssl certificate on HOST if not yet done
        config.trigger.before :up do |trigger|
            trigger.name = "Generate SSL Cert on Host"
            trigger.run = { inline: "powershell -ExecutionPolicy Bypass -File scripts/generate_ssl_cert_on_host.ps1" }
        end
        # Copy certificate from host to guest (Not required for simple HTTP)
        config.vm.provision "file", source: SRC_CERT_FILE_PATH, destination: DEST_CERT_FILE_PATH

        # Provision WinRM HTTPS configuration (Not required for simple HTTP)
        config.vm.provision "shell", path: "scripts/setup_winrm_https.ps1"
    end

    # Provision WinRM configuration
    # config.vm.provision "shell", path: "scripts/winrm_setup.ps1"

    # Additional provisioning steps (if needed) can be added here

    config.trigger.after :up do |trigger|
        trigger.name = "Log End"
        trigger.run = { inline: <<-SCRIPT
                Write-Host "[INFO] Vagrant has finished at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            SCRIPT
        }
    end
end
