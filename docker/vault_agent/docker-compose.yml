services:
  vault_agent:
    build:
      context: ../..
      dockerfile: docker/vault_agent/Dockerfile
    image: custom_vault_agent:latest
    container_name: vault_agent
    cap_add:
      - IPC_LOCK  # Allow Vault to lock memory for production-like setups
    env_file:
      - .env
    environment:
      VAULT_CACERT: /vault/certs/ca.crt
      VAULT_CLIENT_KEY: /vault/certs/agent_key.pem
      VAULT_CLIENT_CERT: /vault/certs/agent_cert.bundle
    networks:
      - ansible_network
    volumes:
      - vault_file:/vault/file
      - vault_logs:/vault/logs
      - ./scripts:/vault/scripts
      - ./secrets:${SECRETS_DIR}
      - ./config:/vault/config:ro
      - ../../certs/CA/cert_chain/root_and_intermediate_chain.bundle:/vault/certs/ca.crt:ro
      - ../../certs/leaf/agent/server_key.pem:/vault/certs/agent_key.pem:ro
      - ../../certs/leaf/agent/intermediate_and_leaf_chain.bundle:/vault/certs/agent_cert.bundle:ro
      # If the following dir/volume is missing, then start the vault_server first to create the auth dir contents
      - vault_ssh_manager_role:${VAULT_SERVER_ROLE_AUTH_DIR}:ro
    entrypoint: [ "sh", "/vault/scripts/agent_startup.sh" ]
    # TODO: Run the service with vault user instead of the root user
    # 100:1000 is the UID:GID of the vault user in the container.
#    user: "100:1000"  # Ensure container runs as 'vault' user
    healthcheck:
      test:
        [
          "CMD", "sh", "-c",
          "pgrep -f 'vault agent' > /dev/null && \
          test -f ${HEALTH_CHECK_MARKER_FILE} || exit 1"
        ]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s

volumes:
  vault_file:
  vault_logs:
  vault_ssh_manager_role:

networks:
  ansible_network:
    driver: bridge
