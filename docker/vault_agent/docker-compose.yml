services:
  vault_agent:
    build:
      context: ../..
      dockerfile: docker/vault_agent/Dockerfile
    image: custom_vault_agent:latest
    container_name: vault_agent
    cap_add:
      - IPC_LOCK  # Allow Vault to lock memory for production-like setups
    env_file:
      - .env
    environment:
      SKIP_SETCAP: false
      VAULT_ADDR: ${VAULT_ADDR}
      ENVIRONMENT: ${ENVIRONMENT}
      SSH_MANAGER_ROLE_NAME: ${SSH_MANAGER_ROLE_NAME:-ssh_manager_role}
    networks:
      - ansible_network
    volumes:
      - vault_file:/vault/file
      - vault_logs:/vault/logs
      - ./scripts:/vault/scripts
      - ./secrets:/vault/secrets
      - ./config:/vault/config:ro
      # If the following dir/volume is missing, then start the vault_server first to create the auth dir contents
      - vault_ssh_manager_role:/vault/secrets/server/auth/${SSH_MANAGER_ROLE_NAME}:ro
    entrypoint: [ "sh", "/vault/scripts/agent_startup.sh" ]
    user: "vault" # Ensure container runs as 'vault' user
    healthcheck:
      test:
        [
          "CMD", "sh", "-c",
          "pgrep -f 'vault agent' > /dev/null && \
           test -s /vault/secrets/agent/ssh_keys/ansible/id_rsa.pub && \
           ! grep -q '^[[:space:]]*$' /vault/secrets/agent/ssh_keys/ansible/id_rsa.pub || exit 1"
        ]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s

volumes:
  vault_file:
  vault_logs:
  vault_ssh_manager_role:

networks:
  ansible_network:
    driver: bridge
