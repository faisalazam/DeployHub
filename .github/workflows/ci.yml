name: CI/CD Workflow

on:
  push:
    branches:
      - ansible

env:
  DOCKER_VERSION: 5:27.3.1
  PAGES_FOLDER: github-pages
  ANSIBLE_CONTAINER_NAME: ansible
  DOCKER_COMPOSE_VERSION: 2.29.2
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  build:
    runs-on: ubuntu-24.04

    outputs:
      test_outcome: ${{ steps.test-results.outputs.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Install Docker with specific version
        run: sh ./install_docker.sh
        working-directory: ./.github/workflows/scripts

      - name: Install Docker Compose with specific version
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Check if docker-compose is available before proceeding
        run: which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }

      - name: Start and setup the container
        id: docker-start
        run: |
          COMPOSE_PROFILES=test docker-compose up -d

          # Check if any container is running
          container_count=$(docker-compose ps -q | wc -l)
          if [ "$container_count" -gt 0 ]; then
            echo "docker_service_started=true" >> $GITHUB_ENV
          else
            echo "docker_service_started=false" >> $GITHUB_ENV
          fi
        working-directory: ./docker

      - name: Setup environment
        run: |
          docker exec \
            -e ENVIRONMENT=local \
            -e RUN_WITH_CERTIFICATE=true \
            "${{ env.ANSIBLE_CONTAINER_NAME }}" \
            sh /usr/local/bin/setup.sh

      - name: Run tests
        id: test-results # id is used later on to check whether tests passed or failed
        run: |
          docker exec \
            -e RUN_TESTS=true \
            -e ENVIRONMENT=local \
            "${{ env.ANSIBLE_CONTAINER_NAME }}" \
            sh /usr/local/bin/run_tests.sh
          if [ $? -eq 0 ]; then
            echo "outcome=success" >> $GITHUB_OUTPUT
          else
            echo "outcome=failure" >> $GITHUB_OUTPUT
          fi

      - name: Report Build Failure
        if: ${{ always() && steps.test-results.outcome == 'skipped' }}
        run: |
          echo "### Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "❌ Pre-playbook tests were not executed because the build failed or the test step was skipped." >> $GITHUB_STEP_SUMMARY

      - name: Execute playbooks
        run: |
          docker exec \
            -e ENVIRONMENT=local \
            -e COMPOSE_PROFILES=test \
            "${{ env.ANSIBLE_CONTAINER_NAME }}" \
            sh /usr/local/bin/execute_playbooks.sh

      - name: Collect Docker container logs
        if: ${{ always() && env.docker_service_started == 'true' }}
        run: |
          docker logs "${{ env.ANSIBLE_CONTAINER_NAME }}"

      - name: Clean up Docker containers and volumes
        if: ${{ always() && env.docker_service_started == 'true' }}
        run: |
          [ -f "${{ env.DOCKER_COMPOSE_FILE }}" ] || { echo "Compose file not found!"; exit 1; }
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans
        working-directory: ./docker

  deploy-gh-pages:
    name: gh-pages-deployment
    runs-on: ubuntu-24.04
    needs: build
    if: always()

    permissions:
      contents: write

    steps:
      - name: Checkout the Repository 🛎️
        uses: actions/checkout@v4

      - name: Copy all README files to GitHub Pages Folder
        run: |
          # Find all README.md files in the repository
          find . -name "*README.md" | while read -r file; do
            # For each README.md found, create the corresponding directory in the destination folder
            target_dir="${{ env.PAGES_FOLDER }}/$(dirname "$file")"
            mkdir -p "$target_dir"

            # Copy the README.md file to the corresponding directory in the GitHub Pages folder
            cp "$file" "$target_dir"
          done

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.PAGES_FOLDER }}

      - name: Display GitHub Pages URL 🌐
        run: |
          echo "The GitHub Pages URL is: ${{ env.SITE_ROOT_URL }}"
